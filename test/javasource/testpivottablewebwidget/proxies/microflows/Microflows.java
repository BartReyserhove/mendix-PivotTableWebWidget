// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testpivottablewebwidget.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the TestPivotTableWebWidget module
	public static void aCT_SalesOrder_DeleteAll(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("TestPivotTableWebWidget.ACT_SalesOrder_DeleteAll").withParams(params).execute(context);
	}
	public static void aCT_SalesOrderImport_Import(IContext context, testpivottablewebwidget.proxies.SalesOrderImport _salesOrderImport)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SalesOrderImport", _salesOrderImport == null ? null : _salesOrderImport.getMendixObject());
		Core.microflowCall("TestPivotTableWebWidget.ACT_SalesOrderImport_Import").withParams(params).execute(context);
	}
	public static testpivottablewebwidget.proxies.Customer sUB_Customer_GetOrCreate(IContext context, java.lang.String _name, java.util.List<testpivottablewebwidget.proxies.Customer> _objectList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Name", _name);
		java.util.ArrayList<IMendixObject> listparam_objectList = null;
		if (_objectList != null)
		{
			listparam_objectList = new java.util.ArrayList<>();
			for (testpivottablewebwidget.proxies.Customer obj : _objectList)
				listparam_objectList.add(obj.getMendixObject());
		}
		params.put("ObjectList", listparam_objectList);

		IMendixObject result = (IMendixObject)Core.microflowCall("TestPivotTableWebWidget.SUB_Customer_GetOrCreate").withParams(params).execute(context);
		return result == null ? null : testpivottablewebwidget.proxies.Customer.initialize(context, result);
	}
	public static testpivottablewebwidget.proxies.Item sUB_Item_GetOrCreate(IContext context, java.lang.String _name, java.util.List<testpivottablewebwidget.proxies.Item> _objectList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Name", _name);
		java.util.ArrayList<IMendixObject> listparam_objectList = null;
		if (_objectList != null)
		{
			listparam_objectList = new java.util.ArrayList<>();
			for (testpivottablewebwidget.proxies.Item obj : _objectList)
				listparam_objectList.add(obj.getMendixObject());
		}
		params.put("ObjectList", listparam_objectList);

		IMendixObject result = (IMendixObject)Core.microflowCall("TestPivotTableWebWidget.SUB_Item_GetOrCreate").withParams(params).execute(context);
		return result == null ? null : testpivottablewebwidget.proxies.Item.initialize(context, result);
	}
	public static testpivottablewebwidget.proxies.Location sUB_Location_GetOrCreate(IContext context, java.lang.String _name, java.util.List<testpivottablewebwidget.proxies.Location> _objectList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Name", _name);
		java.util.ArrayList<IMendixObject> listparam_objectList = null;
		if (_objectList != null)
		{
			listparam_objectList = new java.util.ArrayList<>();
			for (testpivottablewebwidget.proxies.Location obj : _objectList)
				listparam_objectList.add(obj.getMendixObject());
		}
		params.put("ObjectList", listparam_objectList);

		IMendixObject result = (IMendixObject)Core.microflowCall("TestPivotTableWebWidget.SUB_Location_GetOrCreate").withParams(params).execute(context);
		return result == null ? null : testpivottablewebwidget.proxies.Location.initialize(context, result);
	}
	public static java.lang.Long sUB_SalesOrderImport_ProcessImport(IContext context, testpivottablewebwidget.proxies.SalesOrderImport _salesOrderImport)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SalesOrderImport", _salesOrderImport == null ? null : _salesOrderImport.getMendixObject());
		return (java.lang.Long) Core.microflowCall("TestPivotTableWebWidget.SUB_SalesOrderImport_ProcessImport").withParams(params).execute(context);
	}
	public static boolean sUB_SalesOrderImport_Validate(IContext context, testpivottablewebwidget.proxies.SalesOrderImport _salesOrderImport)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SalesOrderImport", _salesOrderImport == null ? null : _salesOrderImport.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("TestPivotTableWebWidget.SUB_SalesOrderImport_Validate").withParams(params).execute(context);
	}
	public static void sUB_SalesOrderImportRow_Import(IContext context, testpivottablewebwidget.proxies.SalesOrderImportRow _salesOrderImportRow, java.util.List<testpivottablewebwidget.proxies.SalesOrder> _salesOrderList, java.util.List<testpivottablewebwidget.proxies.SalesRepresentative> _salesRepresentativeList, java.util.List<testpivottablewebwidget.proxies.Location> _locationList, java.util.List<testpivottablewebwidget.proxies.Customer> _customerList, java.util.List<testpivottablewebwidget.proxies.Item> _itemList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("SalesOrderImportRow", _salesOrderImportRow == null ? null : _salesOrderImportRow.getMendixObject());
		java.util.ArrayList<IMendixObject> listparam_salesOrderList = null;
		if (_salesOrderList != null)
		{
			listparam_salesOrderList = new java.util.ArrayList<>();
			for (testpivottablewebwidget.proxies.SalesOrder obj : _salesOrderList)
				listparam_salesOrderList.add(obj.getMendixObject());
		}
		params.put("SalesOrderList", listparam_salesOrderList);

		java.util.ArrayList<IMendixObject> listparam_salesRepresentativeList = null;
		if (_salesRepresentativeList != null)
		{
			listparam_salesRepresentativeList = new java.util.ArrayList<>();
			for (testpivottablewebwidget.proxies.SalesRepresentative obj : _salesRepresentativeList)
				listparam_salesRepresentativeList.add(obj.getMendixObject());
		}
		params.put("SalesRepresentativeList", listparam_salesRepresentativeList);

		java.util.ArrayList<IMendixObject> listparam_locationList = null;
		if (_locationList != null)
		{
			listparam_locationList = new java.util.ArrayList<>();
			for (testpivottablewebwidget.proxies.Location obj : _locationList)
				listparam_locationList.add(obj.getMendixObject());
		}
		params.put("LocationList", listparam_locationList);

		java.util.ArrayList<IMendixObject> listparam_customerList = null;
		if (_customerList != null)
		{
			listparam_customerList = new java.util.ArrayList<>();
			for (testpivottablewebwidget.proxies.Customer obj : _customerList)
				listparam_customerList.add(obj.getMendixObject());
		}
		params.put("CustomerList", listparam_customerList);

		java.util.ArrayList<IMendixObject> listparam_itemList = null;
		if (_itemList != null)
		{
			listparam_itemList = new java.util.ArrayList<>();
			for (testpivottablewebwidget.proxies.Item obj : _itemList)
				listparam_itemList.add(obj.getMendixObject());
		}
		params.put("ItemList", listparam_itemList);

		Core.microflowCall("TestPivotTableWebWidget.SUB_SalesOrderImportRow_Import").withParams(params).execute(context);
	}
	public static testpivottablewebwidget.proxies.SalesRepresentative sUB_SalesRepresentative_GetOrCreate(IContext context, java.lang.String _name, java.util.List<testpivottablewebwidget.proxies.SalesRepresentative> _objectList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Name", _name);
		java.util.ArrayList<IMendixObject> listparam_objectList = null;
		if (_objectList != null)
		{
			listparam_objectList = new java.util.ArrayList<>();
			for (testpivottablewebwidget.proxies.SalesRepresentative obj : _objectList)
				listparam_objectList.add(obj.getMendixObject());
		}
		params.put("ObjectList", listparam_objectList);

		IMendixObject result = (IMendixObject)Core.microflowCall("TestPivotTableWebWidget.SUB_SalesRepresentative_GetOrCreate").withParams(params).execute(context);
		return result == null ? null : testpivottablewebwidget.proxies.SalesRepresentative.initialize(context, result);
	}
}